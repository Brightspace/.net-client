using Newtonsoft.Json;
using System;
using Newtonsoft.Json.Linq;

namespace LaunchDarkly.Client
{
    /// <summary>
    /// An analytics event that may be sent to LaunchDarkly.
    /// 
    /// This class and its subclasses are public so as to be usable by custom implementations of
    /// <see cref="IStoreEvents"/>. Application code should not construct or modify events; they
    /// are generated by the client.
    /// </summary>
    public abstract class Event
    {
        private static readonly DateTime UnixEpoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);

        /// <summary>
        /// A string describing the type of event, e.g. "feature" for a feature request.
        /// </summary>
        [JsonProperty(PropertyName = "kind", NullValueHandling = NullValueHandling.Ignore)]
        public string Kind { get; private set; }
        
        /// <summary>
        /// Attributes of the user who generated the event. This may differ from <see cref="User"/> in that
        /// some attributes may have been omitted because they are private.
        /// </summary>
        [JsonProperty(PropertyName = "user", NullValueHandling = NullValueHandling.Ignore)]
        internal EventUser EventUser { get; private set; }

        /// <summary>
        /// Date/timestamp of the event.
        /// </summary>
        [JsonProperty(PropertyName = "creationDate", NullValueHandling = NullValueHandling.Ignore)]
        public long CreationDate { get; private set; }

        /// <summary>
        /// The unique key of the feature flag involved in the event.
        /// </summary>
        [JsonProperty(PropertyName = "key", NullValueHandling = NullValueHandling.Ignore)]
        public string Key { get; private set; }
        
        internal Event(string kind, string key, EventUser eventUser)
        {
            Kind = kind;
            CreationDate = GetUnixTimestampMillis(DateTime.UtcNow);
            Key = key;
            EventUser = eventUser;
        }

        /// <summary>
        /// Converts a timestamp to Unix epoch time.
        /// </summary>
        /// <param name="dateTime">a timestamp</param>
        /// <returns>milliseconds since the epoch</returns>
        public static long GetUnixTimestampMillis(DateTime dateTime)
        {
            return (long) (dateTime - UnixEpoch).TotalMilliseconds;
        }
    }

    /// <summary>
    /// An analytics event generated by feature flag evaluation.
    /// </summary>
    public class FeatureRequestEvent : Event
    {
        /// <summary>
        /// The computed value of the flag.
        /// </summary>
        [JsonProperty(PropertyName = "value", NullValueHandling = NullValueHandling.Ignore)]
        public JToken Value { get; private set; }

        /// <summary>
        /// The default value of the flag.
        /// </summary>
        [JsonProperty(PropertyName = "default", NullValueHandling = NullValueHandling.Ignore)]
        public JToken Default { get; private set; }

        /// <summary>
        /// The version of the flag.
        /// </summary>
        [JsonProperty(PropertyName = "version", NullValueHandling = NullValueHandling.Ignore)]
        public JToken Version { get; private set; }

        /// <summary>
        /// The key of the flag that this flag is a prerequisite of, if any.
        /// </summary>
        [JsonProperty(PropertyName = "prereqOf", NullValueHandling = NullValueHandling.Ignore)]
        public JToken PrereqOf { get; private set; }
        
        internal FeatureRequestEvent(string key, EventUser eventUser, JToken value, JToken defaultValue, JToken version,
            JToken prereqOf) : base("feature", key, eventUser)
        {
            Value = value;
            Default = defaultValue;
            Version = version;
            PrereqOf = prereqOf;
        }
    }

    /// <summary>
    /// An analytics event generated by the <see cref="ILdClient.Track(string, User, string)"/> method.
    /// </summary>
    public class CustomEvent : Event
    {
        /// <summary>
        /// Custom data provided for the event.
        /// </summary>
        [JsonProperty(PropertyName = "data", NullValueHandling = NullValueHandling.Ignore)]
        public string Data { get; private set; }
        
        internal CustomEvent(string key, EventUser eventUser, string data) : base("custom", key, eventUser)
        {
            Data = data;
        }
    }

    /// <summary>
    /// An analytics event generated by the <see cref="ILdClient.Identify(User)"/> method.
    /// </summary>
    public class IdentifyEvent : Event
    {
        internal IdentifyEvent(EventUser eventUser) : base("identify", eventUser.Key, eventUser)
        {
        }
    }
}